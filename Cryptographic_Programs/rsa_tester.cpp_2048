#include <mbed.h>
#include "mbedtls/platform.h"
#include "mbedtls/entropy.h"
#include "mbedtls/bignum.h"
#include "mbedtls/x509.h"
#include "mbedtls/rsa.h"

#include <stdio.h>
#include <string.h>

#define mbedtls_printf          printf
#define mbedtls_exit            exit
#define MBEDTLS_EXIT_SUCCESS    EXIT_SUCCESS
#define MBEDTLS_EXIT_FAILURE    EXIT_FAILURE
#define KEY_SIZE 2048
#define EXPONENT 65537


//DigitalOut dout(D10);
DigitalOut dout(PD_1);

int my_rng(void* x, unsigned char* y, size_t z) {
	return 0;
}

int main( void )
{
	int exit_code = MBEDTLS_EXIT_FAILURE;

    unsigned char hash[32];
    unsigned char buf[MBEDTLS_MPI_MAX_SIZE];
	mbedtls_rsa_context rsa;
	mbedtls_mpi N, P, Q, D, E, DP, DQ, QP;

	mbedtls_mpi_init( &N );
	mbedtls_mpi_init( &E );
	mbedtls_mpi_init( &P );
	mbedtls_mpi_init( &Q );
	mbedtls_mpi_init( &D );
	mbedtls_mpi_init( &DP );
	mbedtls_mpi_init( &DQ );
	mbedtls_mpi_init( &QP );

	mbedtls_mpi_read_string( &N , 16 , "C714DB63579B14528CB3C18044379342DA08383BB6B54E5EC1A96B840D6BE38C5E00D9089ABE5475B6B24DD68667CEDF07A7320C5EBAE1AC9DE8EEB761AB4EECFB402D1A39C3B375C9BBF2F7D7FD235CF5F738C8CD6C798D39BF4A63B08424CADCBD7D00F4BEC971C4E5AB1356979D1729EC2364B1234CD7D4A49501C89290DBC51AB3BC8D300C93A6E6BD1D55FC108DB6AB96D3DFF079B87E7203A74B4EF475D6317E31801F27FCC25B07B6789E35832F77055857581EF18C224364CBAEA60A2D65470342553DF3D70BFE7E28DED119AB1A59F61C4D9A4A9C3EDDCF334253760459621B78F99CD32E8B67D2FE2D00E6CF52DCBB86C58BF95BD08827E266A6EB" );

	mbedtls_mpi_read_string( &P , 16 , "F22C1F106B56810A9768B19D1338ABC6D1F9A5C39D7CEC4C5964642D11EAF6153AE9E649CAD67028EE44B9A25ED97B2B67B49068BD168F412689E91E90679BB8CD0517ACBFF6EBBB623F246507142730BD671B7FF6A7B1779B9FF386C88378B4203187702B4D64DCDD49ECA97E9E648C07BEF28F90747D357EE263725B2E8C5B" );

	mbedtls_mpi_read_string( &Q , 16 , "D272DE436B915C983270A9A59720EC8BCE824FBACE9AE9C08F0CE067A3D7EBB08E49D86D7864EC2436885936BF6A8CE6139BB77BF139B4F39C0143833728DA8E023FBFED35D1B12B52B150042C19B9571A2FB4E14BFC1ED086ED34C27A32660BBAA64DF9F684869E6778D1A5EF554265E47E56E1719E2263A30D238AB2A994B1" );

	mbedtls_mpi_read_string( &D , 16 , "012294F9A5073A54C4D3F03780AC11C7E0CC5E8860A0A4AE14F697FEAC6B9564387E52BE777B66FF3627CAC528065C29EE0B92FFCFB920639BE6E1C2E3E8ABCE32C4893D4C0A59F1EDA6325AC812D1152245E2E9FF8483263DFD0C39DDF372EE412C9CBE2E51B97E4F916BA9F43AC5BCDB12AB44FE09907CEE8BC859B6960CAE0C30A86297CA239260AAF1DD8DA5A32A85BEDC71A09E774319862EE60BE4E78FB4BDEC4DE5C8FAB6A949A4EAC4D81CC8382F11B220CAEDAC03E390FAA857050E07C706E6427724229A08D97F086E40D6395982504F496635CB672AFCCA2EA82A5DB98D0979D0BD1F1E331F06F9573509C3685D15A0AF65CF9FFA30C7D8BC68A1" );

	mbedtls_mpi_read_string( &DP , 16 , "8EC48C1BB5EBED6F3D0BAF8A1686D65E03F3D551994AC853CA6F70CF513CDF8E6C88F00698DA0A8D56CA9555AFED2EBBCC0B9B06E452A469983ABD801349C1781505E78B243081909ABEF6C9C87E8D0C22DCE24D723032637D0FB315C6A81B44B5A5FD5E9768AD09B83B9895E3DBA513188DED99CD639F5D264C78AC362D1EF9" );

	mbedtls_mpi_read_string( &DQ , 16 , "262C9004CACE636D7838D78D220CE6DBB56A0DEC64EDD4D90919DCDAEFED8AE34BEC39462240AC55254F365FA7F93BF5C038CEDFBCB22B10C58BB523682E10F711915ECF38A400EF4AE0BF1302ACE7E1D4EE32716BC7200FD369D3D8333251306F7B1B49EC5DBDCD9E175C702D29DA11819129515BBAC3A22F4182E0F5E7AD01" );

	mbedtls_mpi_read_string( &QP , 16 , "B2A2EC8D7823877DAFF088FEC656FADE2798C18978839006573F09E4E10BCEA7E2E676B08AF07F093053B5541932644B5E22EA2BC5DD40A27DC155F198EA303A8D53EA539D8A03EEAB379E6817C109D42965066E6F1582A4E94A189DBF191B6789337576AEBD65227DC4243E62F2F860DF897E7A77E19DEA3124A96CA26A7107" );

	mbedtls_mpi_read_string( &E , 16 , "010001" );

	mbedtls_rsa_init( &rsa, MBEDTLS_RSA_PKCS_V15, 0 );
	mbedtls_rsa_import( &rsa, &N, &P, &Q, &D, &E );
	int status = mbedtls_rsa_complete (&rsa);

	fprintf ( stdout , "Status of RSA Import: %s\n" , status == 0 ? "GOOD to Go": "Failed" );
	dout=1;
	if( ( status = mbedtls_rsa_pkcs1_sign( &rsa, NULL, NULL,
	MBEDTLS_RSA_PRIVATE, MBEDTLS_MD_SHA256, 20, hash, buf ) ) != 0 )
    {
	dout=0;
        mbedtls_printf( "Failed\n  ! mbedtls_rsa_pkcs1_sign returned -0x%0x\n\n", status );
        goto exit;
    }
	dout=0;
dout=1;
if( ( status = mbedtls_rsa_pkcs1_verify( &rsa, NULL, NULL, MBEDTLS_RSA_PUBLIC,
                                  MBEDTLS_MD_SHA256, 20, hash, buf ) ) != 0 )
    {
	dout=1;
        mbedtls_printf( " failed\n  ! mbedtls_rsa_pkcs1_verify returned -0x%0x\n\n", status );
        goto exit;
    }
dout=0;

	mbedtls_mpi_free( &N );
	mbedtls_mpi_free( &E );
	mbedtls_mpi_free( &P );
	mbedtls_mpi_free( &Q );
	mbedtls_mpi_free( &D );
	mbedtls_mpi_free( &DP );
	mbedtls_mpi_free( &DQ );
	mbedtls_mpi_free( &QP );

exit:	exit_code = MBEDTLS_EXIT_SUCCESS;
fprintf(stdout,"Done \n");
	return( exit_code );
}
